{"id":"../node_modules/zxcvbn/lib/feedback.js","dependencies":[{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/feedback.js.map","includedInParent":true,"mtime":1486439859000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/src/feedback.coffee","includedInParent":true,"mtime":1482221321000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/package.json","includedInParent":true,"mtime":1553433954598},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/.babelrc","includedInParent":true,"mtime":1552312477226},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/package.json","includedInParent":true,"mtime":1553433953594},{"name":"./scoring","loc":{"line":4,"column":18},"parent":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/feedback.js","resolved":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/scoring.js"}],"generated":{"js":"// Generated by CoffeeScript 1.10.0\nvar feedback, scoring;\n\nscoring = require('./scoring');\n\nfeedback = {\n  default_feedback: {\n    warning: '',\n    suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n  },\n  get_feedback: function(score, sequence) {\n    var extra_feedback, i, len, longest_match, match, ref;\n    if (sequence.length === 0) {\n      return this.default_feedback;\n    }\n    if (score > 2) {\n      return {\n        warning: '',\n        suggestions: []\n      };\n    }\n    longest_match = sequence[0];\n    ref = sequence.slice(1);\n    for (i = 0, len = ref.length; i < len; i++) {\n      match = ref[i];\n      if (match.token.length > longest_match.token.length) {\n        longest_match = match;\n      }\n    }\n    feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n    extra_feedback = 'Add another word or two. Uncommon words are better.';\n    if (feedback != null) {\n      feedback.suggestions.unshift(extra_feedback);\n      if (feedback.warning == null) {\n        feedback.warning = '';\n      }\n    } else {\n      feedback = {\n        warning: '',\n        suggestions: [extra_feedback]\n      };\n    }\n    return feedback;\n  },\n  get_match_feedback: function(match, is_sole_match) {\n    var layout, warning;\n    switch (match.pattern) {\n      case 'dictionary':\n        return this.get_dictionary_match_feedback(match, is_sole_match);\n      case 'spatial':\n        layout = match.graph.toUpperCase();\n        warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n        return {\n          warning: warning,\n          suggestions: ['Use a longer keyboard pattern with more turns']\n        };\n      case 'repeat':\n        warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n        return {\n          warning: warning,\n          suggestions: ['Avoid repeated words and characters']\n        };\n      case 'sequence':\n        return {\n          warning: \"Sequences like abc or 6543 are easy to guess\",\n          suggestions: ['Avoid sequences']\n        };\n      case 'regex':\n        if (match.regex_name === 'recent_year') {\n          return {\n            warning: \"Recent years are easy to guess\",\n            suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n          };\n        }\n        break;\n      case 'date':\n        return {\n          warning: \"Dates are often easy to guess\",\n          suggestions: ['Avoid dates and years that are associated with you']\n        };\n    }\n  },\n  get_dictionary_match_feedback: function(match, is_sole_match) {\n    var ref, result, suggestions, warning, word;\n    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n    suggestions = [];\n    word = match.token;\n    if (word.match(scoring.START_UPPER)) {\n      suggestions.push(\"Capitalization doesn't help very much\");\n    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n      suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n    }\n    if (match.reversed && match.token.length >= 4) {\n      suggestions.push(\"Reversed words aren't much harder to guess\");\n    }\n    if (match.l33t) {\n      suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n    }\n    result = {\n      warning: warning,\n      suggestions: suggestions\n    };\n    return result;\n  }\n};\n\nmodule.exports = feedback;\n\n\n"},"sourceMaps":{"js":{"version":3,"file":"feedback.js","sourceRoot":"..","sources":["src/feedback.coffee"],"names":[],"mappings":";AAAA,IAAA;;AAAA,OAAA,GAAU,OAAA,CAAQ,WAAR;;AAEV,QAAA,GACE;EAAA,gBAAA,EACE;IAAA,OAAA,EAAS,EAAT;IACA,WAAA,EAAa,CACX,uCADW,EAEX,mDAFW,CADb;GADF;EAOA,YAAA,EAAc,SAAC,KAAD,EAAQ,QAAR;AAEZ,QAAA;IAAA,IAA4B,QAAQ,CAAC,MAAT,KAAmB,CAA/C;AAAA,aAAO,IAAC,CAAA,iBAAR;;IAGO,IAAG,KAAA,GAAQ,CAAX;aACL;QAAA,OAAA,EAAS,EAAT;QACA,WAAA,EAAa,EADb;QADK;;IAKP,aAAA,GAAgB,QAAS,CAAA,CAAA;AACzB;AAAA,SAAA,qCAAA;;MACE,IAAyB,KAAK,CAAC,KAAK,CAAC,MAAZ,GAAqB,aAAa,CAAC,KAAK,CAAC,MAAlE;QAAA,aAAA,GAAgB,MAAhB;;AADF;IAEA,QAAA,GAAW,IAAC,CAAA,kBAAD,CAAoB,aAApB,EAAmC,QAAQ,CAAC,MAAT,KAAmB,CAAtD;IACX,cAAA,GAAiB;IACjB,IAAG,gBAAH;MACE,QAAQ,CAAC,WAAW,CAAC,OAArB,CAA6B,cAA7B;MACA,IAA6B,wBAA7B;QAAA,QAAQ,CAAC,OAAT,GAAmB,GAAnB;OAFF;KAAA,MAAA;MAIE,QAAA,GACE;QAAA,OAAA,EAAS,EAAT;QACA,WAAA,EAAa,CAAC,cAAD,CADb;QALJ;;WAOA;EAtBY,CAPd;EA+BA,kBAAA,EAAoB,SAAC,KAAD,EAAQ,aAAR;AAClB,QAAA;AAAA,YAAO,KAAK,CAAC,OAAb;AAAA,WACO,YADP;eAEI,IAAC,CAAA,6BAAD,CAA+B,KAA/B,EAAsC,aAAtC;AAFJ,WAIO,SAJP;QAKI,MAAA,GAAS,KAAK,CAAC,KAAK,CAAC,WAAZ,CAAA;QACT,OAAA,GAAa,KAAK,CAAC,KAAN,KAAe,CAAlB,GACR,yCADQ,GAGR;eACF;UAAA,OAAA,EAAS,OAAT;UACA,WAAA,EAAa,CACX,+CADW,CADb;;AAVJ,WAeO,QAfP;QAgBI,OAAA,GAAa,KAAK,CAAC,UAAU,CAAC,MAAjB,KAA2B,CAA9B,GACR,sCADQ,GAGR;eACF;UAAA,OAAA,EAAS,OAAT;UACA,WAAA,EAAa,CACX,qCADW,CADb;;AApBJ,WAyBO,UAzBP;eA0BI;UAAA,OAAA,EAAS,8CAAT;UACA,WAAA,EAAa,CACX,iBADW,CADb;;AA1BJ,WA+BO,OA/BP;QAgCI,IAAG,KAAK,CAAC,UAAN,KAAoB,aAAvB;iBACE;YAAA,OAAA,EAAS,gCAAT;YACA,WAAA,EAAa,CACX,oBADW,EAEX,0CAFW,CADb;YADF;;AADG;AA/BP,WAuCO,MAvCP;eAwCI;UAAA,OAAA,EAAS,+BAAT;UACA,WAAA,EAAa,CACX,oDADW,CADb;;AAxCJ;EADkB,CA/BpB;EA6EA,6BAAA,EAA+B,SAAC,KAAD,EAAQ,aAAR;AAC7B,QAAA;IAAA,OAAA,GAAa,KAAK,CAAC,eAAN,KAAyB,WAA5B,GACL,aAAA,IAAkB,CAAI,KAAK,CAAC,IAA5B,IAAqC,CAAI,KAAK,CAAC,QAAlD,GACK,KAAK,CAAC,IAAN,IAAc,EAAjB,GACE,kCADF,GAEQ,KAAK,CAAC,IAAN,IAAc,GAAjB,GACH,mCADG,GAGH,gCANJ,GAOQ,KAAK,CAAC,aAAN,IAAuB,CAA1B,GACH,6CADG,GAAA,MARG,GAUF,KAAK,CAAC,eAAN,KAAyB,mBAA5B,GACA,aAAH,GACE,mCADF,GAAA,MADG,UAGG,KAAK,CAAC,gBAAN,KAA0B,UAA1B,IAAA,GAAA,KAAsC,YAAtC,IAAA,GAAA,KAAoD,cAAvD,GACA,aAAH,GACE,oDADF,GAGE,6CAJC,GAMH;IAEF,WAAA,GAAc;IACd,IAAA,GAAO,KAAK,CAAC;IACb,IAAG,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,WAAnB,CAAH;MACE,WAAW,CAAC,IAAZ,CAAiB,uCAAjB,EADF;KAAA,MAEK,IAAG,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,SAAnB,CAAA,IAAkC,IAAI,CAAC,WAAL,CAAA,CAAA,KAAsB,IAA3D;MACH,WAAW,CAAC,IAAZ,CAAiB,2DAAjB,EADG;;IAGL,IAAG,KAAK,CAAC,QAAN,IAAmB,KAAK,CAAC,KAAK,CAAC,MAAZ,IAAsB,CAA5C;MACE,WAAW,CAAC,IAAZ,CAAiB,4CAAjB,EADF;;IAEA,IAAG,KAAK,CAAC,IAAT;MACE,WAAW,CAAC,IAAZ,CAAiB,wEAAjB,EADF;;IAGA,MAAA,GACE;MAAA,OAAA,EAAS,OAAT;MACA,WAAA,EAAa,WADb;;WAEF;EArC6B,CA7E/B;;;AAoHF,MAAM,CAAC,OAAP,GAAiB","sourcesContent":["scoring = require('./scoring')\n\nfeedback =\n  default_feedback:\n    warning: ''\n    suggestions: [\n      \"Use a few words, avoid common phrases\"\n      \"No need for symbols, digits, or uppercase letters\"\n    ]\n\n  get_feedback: (score, sequence) ->\n    # starting feedback\n    return @default_feedback if sequence.length == 0\n\n    # no feedback if score is good or great.\n    return if score > 2\n      warning: ''\n      suggestions: []\n\n    # tie feedback to the longest match for longer sequences\n    longest_match = sequence[0]\n    for match in sequence[1..]\n      longest_match = match if match.token.length > longest_match.token.length\n    feedback = @get_match_feedback(longest_match, sequence.length == 1)\n    extra_feedback = 'Add another word or two. Uncommon words are better.'\n    if feedback?\n      feedback.suggestions.unshift extra_feedback\n      feedback.warning = '' unless feedback.warning?\n    else\n      feedback =\n        warning: ''\n        suggestions: [extra_feedback]\n    feedback\n\n  get_match_feedback: (match, is_sole_match) ->\n    switch match.pattern\n      when 'dictionary'\n        @get_dictionary_match_feedback match, is_sole_match\n\n      when 'spatial'\n        layout = match.graph.toUpperCase()\n        warning = if match.turns == 1\n          'Straight rows of keys are easy to guess'\n        else\n          'Short keyboard patterns are easy to guess'\n        warning: warning\n        suggestions: [\n          'Use a longer keyboard pattern with more turns'\n        ]\n\n      when 'repeat'\n        warning = if match.base_token.length == 1\n          'Repeats like \"aaa\" are easy to guess'\n        else\n          'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"'\n        warning: warning\n        suggestions: [\n          'Avoid repeated words and characters'\n        ]\n\n      when 'sequence'\n        warning: \"Sequences like abc or 6543 are easy to guess\"\n        suggestions: [\n          'Avoid sequences'\n        ]\n\n      when 'regex'\n        if match.regex_name == 'recent_year'\n          warning: \"Recent years are easy to guess\"\n          suggestions: [\n            'Avoid recent years'\n            'Avoid years that are associated with you'\n          ]\n\n      when 'date'\n        warning: \"Dates are often easy to guess\"\n        suggestions: [\n          'Avoid dates and years that are associated with you'\n        ]\n\n  get_dictionary_match_feedback: (match, is_sole_match) ->\n    warning = if match.dictionary_name == 'passwords'\n      if is_sole_match and not match.l33t and not match.reversed\n        if match.rank <= 10\n          'This is a top-10 common password'\n        else if match.rank <= 100\n          'This is a top-100 common password'\n        else\n          'This is a very common password'\n      else if match.guesses_log10 <= 4\n        'This is similar to a commonly used password'\n    else if match.dictionary_name == 'english_wikipedia'\n      if is_sole_match\n        'A word by itself is easy to guess'\n    else if match.dictionary_name in ['surnames', 'male_names', 'female_names']\n      if is_sole_match\n        'Names and surnames by themselves are easy to guess'\n      else\n        'Common names and surnames are easy to guess'\n    else\n      ''\n\n    suggestions = []\n    word = match.token\n    if word.match(scoring.START_UPPER)\n      suggestions.push \"Capitalization doesn't help very much\"\n    else if word.match(scoring.ALL_UPPER) and word.toLowerCase() != word\n      suggestions.push \"All-uppercase is almost as easy to guess as all-lowercase\"\n\n    if match.reversed and match.token.length >= 4\n      suggestions.push \"Reversed words aren't much harder to guess\"\n    if match.l33t\n      suggestions.push \"Predictable substitutions like '@' instead of 'a' don't help very much\"\n\n    result =\n      warning: warning\n      suggestions: suggestions\n    result\n\nmodule.exports = feedback\n"]}},"error":null,"hash":"cfd88dc8b3bec16647126b2266eb0b30","cacheData":{"env":{}}}