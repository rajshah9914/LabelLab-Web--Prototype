{"id":"../node_modules/zxcvbn/lib/time_estimates.js","dependencies":[{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/time_estimates.js.map","includedInParent":true,"mtime":1486439859000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/src/time_estimates.coffee","includedInParent":true,"mtime":1462327472000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/package.json","includedInParent":true,"mtime":1553433954598},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/.babelrc","includedInParent":true,"mtime":1552312477226},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/package.json","includedInParent":true,"mtime":1553433953594}],"generated":{"js":"// Generated by CoffeeScript 1.10.0\nvar time_estimates;\n\ntime_estimates = {\n  estimate_attack_times: function(guesses) {\n    var crack_times_display, crack_times_seconds, scenario, seconds;\n    crack_times_seconds = {\n      online_throttling_100_per_hour: guesses / (100 / 3600),\n      online_no_throttling_10_per_second: guesses / 10,\n      offline_slow_hashing_1e4_per_second: guesses / 1e4,\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n    };\n    crack_times_display = {};\n    for (scenario in crack_times_seconds) {\n      seconds = crack_times_seconds[scenario];\n      crack_times_display[scenario] = this.display_time(seconds);\n    }\n    return {\n      crack_times_seconds: crack_times_seconds,\n      crack_times_display: crack_times_display,\n      score: this.guesses_to_score(guesses)\n    };\n  },\n  guesses_to_score: function(guesses) {\n    var DELTA;\n    DELTA = 5;\n    if (guesses < 1e3 + DELTA) {\n      return 0;\n    } else if (guesses < 1e6 + DELTA) {\n      return 1;\n    } else if (guesses < 1e8 + DELTA) {\n      return 2;\n    } else if (guesses < 1e10 + DELTA) {\n      return 3;\n    } else {\n      return 4;\n    }\n  },\n  display_time: function(seconds) {\n    var base, century, day, display_num, display_str, hour, minute, month, ref, year;\n    minute = 60;\n    hour = minute * 60;\n    day = hour * 24;\n    month = day * 31;\n    year = month * 12;\n    century = year * 100;\n    ref = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, base + \" second\"]) : seconds < hour ? (base = Math.round(seconds / minute), [base, base + \" minute\"]) : seconds < day ? (base = Math.round(seconds / hour), [base, base + \" hour\"]) : seconds < month ? (base = Math.round(seconds / day), [base, base + \" day\"]) : seconds < year ? (base = Math.round(seconds / month), [base, base + \" month\"]) : seconds < century ? (base = Math.round(seconds / year), [base, base + \" year\"]) : [null, 'centuries'], display_num = ref[0], display_str = ref[1];\n    if ((display_num != null) && display_num !== 1) {\n      display_str += 's';\n    }\n    return display_str;\n  }\n};\n\nmodule.exports = time_estimates;\n\n\n"},"sourceMaps":{"js":{"version":3,"file":"time_estimates.js","sourceRoot":"..","sources":["src/time_estimates.coffee"],"names":[],"mappings":";AAAA,IAAA;;AAAA,cAAA,GACE;EAAA,qBAAA,EAAuB,SAAC,OAAD;AACrB,QAAA;IAAA,mBAAA,GACE;MAAA,8BAAA,EAAgC,OAAA,GAAU,CAAC,GAAA,GAAM,IAAP,CAA1C;MACA,kCAAA,EAAoC,OAAA,GAAU,EAD9C;MAEA,mCAAA,EAAqC,OAAA,GAAU,GAF/C;MAGA,oCAAA,EAAsC,OAAA,GAAU,IAHhD;;IAKF,mBAAA,GAAsB;AACtB,SAAA,+BAAA;;MACE,mBAAoB,CAAA,QAAA,CAApB,GAAgC,IAAC,CAAA,YAAD,CAAc,OAAd;AADlC;WAGA;MAAA,mBAAA,EAAqB,mBAArB;MACA,mBAAA,EAAqB,mBADrB;MAEA,KAAA,EAAO,IAAC,CAAA,gBAAD,CAAkB,OAAlB,CAFP;;EAXqB,CAAvB;EAgBA,gBAAA,EAAkB,SAAC,OAAD;AAChB,QAAA;IAAA,KAAA,GAAQ;IACR,IAAG,OAAA,GAAU,GAAA,GAAM,KAAnB;aAEE,EAFF;KAAA,MAGK,IAAG,OAAA,GAAU,GAAA,GAAM,KAAnB;aAEH,EAFG;KAAA,MAGA,IAAG,OAAA,GAAU,GAAA,GAAM,KAAnB;aAEH,EAFG;KAAA,MAGA,IAAG,OAAA,GAAU,IAAA,GAAO,KAApB;aAGH,EAHG;KAAA,MAAA;aAMH,EANG;;EAXW,CAhBlB;EAmCA,YAAA,EAAc,SAAC,OAAD;AACZ,QAAA;IAAA,MAAA,GAAS;IACT,IAAA,GAAO,MAAA,GAAS;IAChB,GAAA,GAAM,IAAA,GAAO;IACb,KAAA,GAAQ,GAAA,GAAM;IACd,IAAA,GAAO,KAAA,GAAQ;IACf,OAAA,GAAU,IAAA,GAAO;IACjB,MAAgC,OAAA,GAAU,CAAb,GAC3B,CAAC,IAAD,EAAO,oBAAP,CAD2B,GAErB,OAAA,GAAU,MAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAX,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,SAAf,CADA,CADG,GAGG,OAAA,GAAU,IAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAU,MAArB,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,SAAf,CADA,CADG,GAGG,OAAA,GAAU,GAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAU,IAArB,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,OAAf,CADA,CADG,GAGG,OAAA,GAAU,KAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAU,GAArB,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,MAAf,CADA,CADG,GAGG,OAAA,GAAU,IAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAU,KAArB,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,QAAf,CADA,CADG,GAGG,OAAA,GAAU,OAAb,GACH,CAAA,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,OAAA,GAAU,IAArB,CAAP,EACA,CAAC,IAAD,EAAU,IAAD,GAAM,OAAf,CADA,CADG,GAIH,CAAC,IAAD,EAAO,WAAP,CArBF,EAAC,oBAAD,EAAc;IAsBd,IAAsB,qBAAA,IAAiB,WAAA,KAAe,CAAtD;MAAA,WAAA,IAAe,IAAf;;WACA;EA9BY,CAnCd;;;AAmEF,MAAM,CAAC,OAAP,GAAiB","sourcesContent":["time_estimates =\n  estimate_attack_times: (guesses) ->\n    crack_times_seconds =\n      online_throttling_100_per_hour: guesses / (100 / 3600)\n      online_no_throttling_10_per_second: guesses / 10\n      offline_slow_hashing_1e4_per_second: guesses / 1e4\n      offline_fast_hashing_1e10_per_second: guesses / 1e10\n\n    crack_times_display = {}\n    for scenario, seconds of crack_times_seconds\n      crack_times_display[scenario] = @display_time seconds\n\n    crack_times_seconds: crack_times_seconds\n    crack_times_display: crack_times_display\n    score: @guesses_to_score guesses\n\n\n  guesses_to_score: (guesses) ->\n    DELTA = 5\n    if guesses < 1e3 + DELTA\n      # risky password: \"too guessable\"\n      0\n    else if guesses < 1e6 + DELTA\n      # modest protection from throttled online attacks: \"very guessable\"\n      1\n    else if guesses < 1e8 + DELTA\n      # modest protection from unthrottled online attacks: \"somewhat guessable\"\n      2\n    else if guesses < 1e10 + DELTA\n      # modest protection from offline attacks: \"safely unguessable\"\n      # assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n      3\n    else\n      # strong protection from offline attacks under same scenario: \"very unguessable\"\n      4\n\n  display_time: (seconds) ->\n    minute = 60\n    hour = minute * 60\n    day = hour * 24\n    month = day * 31\n    year = month * 12\n    century = year * 100\n    [display_num, display_str] = if seconds < 1\n      [null, 'less than a second']\n    else if seconds < minute\n      base = Math.round seconds\n      [base, \"#{base} second\"]\n    else if seconds < hour\n      base = Math.round seconds / minute\n      [base, \"#{base} minute\"]\n    else if seconds < day\n      base = Math.round seconds / hour\n      [base, \"#{base} hour\"]\n    else if seconds < month\n      base = Math.round seconds / day\n      [base, \"#{base} day\"]\n    else if seconds < year\n      base = Math.round seconds / month\n      [base, \"#{base} month\"]\n    else if seconds < century\n      base = Math.round seconds / year\n      [base, \"#{base} year\"]\n    else\n      [null, 'centuries']\n    display_str += 's' if display_num? and display_num != 1\n    display_str\n\nmodule.exports = time_estimates\n"]}},"error":null,"hash":"43bb3c8ccbcb054eb821a42ffcea18b2","cacheData":{"env":{}}}