{"id":"../node_modules/zxcvbn/lib/scoring.js","dependencies":[{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/scoring.js.map","includedInParent":true,"mtime":1486439859000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/src/scoring.coffee","includedInParent":true,"mtime":1486430089000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/package.json","includedInParent":true,"mtime":1553433954598},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/.babelrc","includedInParent":true,"mtime":1552312477226},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/package.json","includedInParent":true,"mtime":1553433953594},{"name":"./adjacency_graphs","loc":{"line":4,"column":27},"parent":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/scoring.js","resolved":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/adjacency_graphs.js"}],"generated":{"js":"// Generated by CoffeeScript 1.10.0\nvar BRUTEFORCE_CARDINALITY, MIN_GUESSES_BEFORE_GROWING_SEQUENCE, MIN_SUBMATCH_GUESSES_MULTI_CHAR, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, adjacency_graphs, calc_average_degree, k, scoring, v;\n\nadjacency_graphs = require('./adjacency_graphs');\n\ncalc_average_degree = function(graph) {\n  var average, k, key, n, neighbors, v;\n  average = 0;\n  for (key in graph) {\n    neighbors = graph[key];\n    average += ((function() {\n      var len, o, results;\n      results = [];\n      for (o = 0, len = neighbors.length; o < len; o++) {\n        n = neighbors[o];\n        if (n) {\n          results.push(n);\n        }\n      }\n      return results;\n    })()).length;\n  }\n  average /= ((function() {\n    var results;\n    results = [];\n    for (k in graph) {\n      v = graph[k];\n      results.push(k);\n    }\n    return results;\n  })()).length;\n  return average;\n};\n\nBRUTEFORCE_CARDINALITY = 10;\n\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\n\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\n\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\n\nscoring = {\n  nCk: function(n, k) {\n    var d, o, r, ref;\n    if (k > n) {\n      return 0;\n    }\n    if (k === 0) {\n      return 1;\n    }\n    r = 1;\n    for (d = o = 1, ref = k; 1 <= ref ? o <= ref : o >= ref; d = 1 <= ref ? ++o : --o) {\n      r *= n;\n      r /= d;\n      n -= 1;\n    }\n    return r;\n  },\n  log10: function(n) {\n    return Math.log(n) / Math.log(10);\n  },\n  log2: function(n) {\n    return Math.log(n) / Math.log(2);\n  },\n  factorial: function(n) {\n    var f, i, o, ref;\n    if (n < 2) {\n      return 1;\n    }\n    f = 1;\n    for (i = o = 2, ref = n; 2 <= ref ? o <= ref : o >= ref; i = 2 <= ref ? ++o : --o) {\n      f *= i;\n    }\n    return f;\n  },\n  most_guessable_match_sequence: function(password, matches, _exclude_additive) {\n    var _, bruteforce_update, guesses, k, l, len, len1, len2, lst, m, make_bruteforce_match, matches_by_j, n, o, optimal, optimal_l, optimal_match_sequence, q, ref, ref1, u, unwind, update, w;\n    if (_exclude_additive == null) {\n      _exclude_additive = false;\n    }\n    n = password.length;\n    matches_by_j = (function() {\n      var o, ref, results;\n      results = [];\n      for (_ = o = 0, ref = n; 0 <= ref ? o < ref : o > ref; _ = 0 <= ref ? ++o : --o) {\n        results.push([]);\n      }\n      return results;\n    })();\n    for (o = 0, len = matches.length; o < len; o++) {\n      m = matches[o];\n      matches_by_j[m.j].push(m);\n    }\n    for (q = 0, len1 = matches_by_j.length; q < len1; q++) {\n      lst = matches_by_j[q];\n      lst.sort(function(m1, m2) {\n        return m1.i - m2.i;\n      });\n    }\n    optimal = {\n      m: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })(),\n      pi: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })(),\n      g: (function() {\n        var ref, results, u;\n        results = [];\n        for (_ = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; _ = 0 <= ref ? ++u : --u) {\n          results.push({});\n        }\n        return results;\n      })()\n    };\n    update = (function(_this) {\n      return function(m, l) {\n        var competing_g, competing_l, g, k, pi, ref;\n        k = m.j;\n        pi = _this.estimate_guesses(m, password);\n        if (l > 1) {\n          pi *= optimal.pi[m.i - 1][l - 1];\n        }\n        g = _this.factorial(l) * pi;\n        if (!_exclude_additive) {\n          g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1);\n        }\n        ref = optimal.g[k];\n        for (competing_l in ref) {\n          competing_g = ref[competing_l];\n          if (competing_l > l) {\n            continue;\n          }\n          if (competing_g <= g) {\n            return;\n          }\n        }\n        optimal.g[k][l] = g;\n        optimal.m[k][l] = m;\n        return optimal.pi[k][l] = pi;\n      };\n    })(this);\n    bruteforce_update = (function(_this) {\n      return function(k) {\n        var i, l, last_m, ref, results, u;\n        m = make_bruteforce_match(0, k);\n        update(m, 1);\n        results = [];\n        for (i = u = 1, ref = k; 1 <= ref ? u <= ref : u >= ref; i = 1 <= ref ? ++u : --u) {\n          m = make_bruteforce_match(i, k);\n          results.push((function() {\n            var ref1, results1;\n            ref1 = optimal.m[i - 1];\n            results1 = [];\n            for (l in ref1) {\n              last_m = ref1[l];\n              l = parseInt(l);\n              if (last_m.pattern === 'bruteforce') {\n                continue;\n              }\n              results1.push(update(m, l + 1));\n            }\n            return results1;\n          })());\n        }\n        return results;\n      };\n    })(this);\n    make_bruteforce_match = (function(_this) {\n      return function(i, j) {\n        return {\n          pattern: 'bruteforce',\n          token: password.slice(i, +j + 1 || 9e9),\n          i: i,\n          j: j\n        };\n      };\n    })(this);\n    unwind = (function(_this) {\n      return function(n) {\n        var candidate_g, candidate_l, g, k, l, optimal_match_sequence, ref;\n        optimal_match_sequence = [];\n        k = n - 1;\n        l = void 0;\n        g = Infinity;\n        ref = optimal.g[k];\n        for (candidate_l in ref) {\n          candidate_g = ref[candidate_l];\n          if (candidate_g < g) {\n            l = candidate_l;\n            g = candidate_g;\n          }\n        }\n        while (k >= 0) {\n          m = optimal.m[k][l];\n          optimal_match_sequence.unshift(m);\n          k = m.i - 1;\n          l--;\n        }\n        return optimal_match_sequence;\n      };\n    })(this);\n    for (k = u = 0, ref = n; 0 <= ref ? u < ref : u > ref; k = 0 <= ref ? ++u : --u) {\n      ref1 = matches_by_j[k];\n      for (w = 0, len2 = ref1.length; w < len2; w++) {\n        m = ref1[w];\n        if (m.i > 0) {\n          for (l in optimal.m[m.i - 1]) {\n            l = parseInt(l);\n            update(m, l + 1);\n          }\n        } else {\n          update(m, 1);\n        }\n      }\n      bruteforce_update(k);\n    }\n    optimal_match_sequence = unwind(n);\n    optimal_l = optimal_match_sequence.length;\n    if (password.length === 0) {\n      guesses = 1;\n    } else {\n      guesses = optimal.g[n - 1][optimal_l];\n    }\n    return {\n      password: password,\n      guesses: guesses,\n      guesses_log10: this.log10(guesses),\n      sequence: optimal_match_sequence\n    };\n  },\n  estimate_guesses: function(match, password) {\n    var estimation_functions, guesses, min_guesses;\n    if (match.guesses != null) {\n      return match.guesses;\n    }\n    min_guesses = 1;\n    if (match.token.length < password.length) {\n      min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR : MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n    }\n    estimation_functions = {\n      bruteforce: this.bruteforce_guesses,\n      dictionary: this.dictionary_guesses,\n      spatial: this.spatial_guesses,\n      repeat: this.repeat_guesses,\n      sequence: this.sequence_guesses,\n      regex: this.regex_guesses,\n      date: this.date_guesses\n    };\n    guesses = estimation_functions[match.pattern].call(this, match);\n    match.guesses = Math.max(guesses, min_guesses);\n    match.guesses_log10 = this.log10(match.guesses);\n    return match.guesses;\n  },\n  bruteforce_guesses: function(match) {\n    var guesses, min_guesses;\n    guesses = Math.pow(BRUTEFORCE_CARDINALITY, match.token.length);\n    if (guesses === Number.POSITIVE_INFINITY) {\n      guesses = Number.MAX_VALUE;\n    }\n    min_guesses = match.token.length === 1 ? MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1 : MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    return Math.max(guesses, min_guesses);\n  },\n  repeat_guesses: function(match) {\n    return match.base_guesses * match.repeat_count;\n  },\n  sequence_guesses: function(match) {\n    var base_guesses, first_chr;\n    first_chr = match.token.charAt(0);\n    if (first_chr === 'a' || first_chr === 'A' || first_chr === 'z' || first_chr === 'Z' || first_chr === '0' || first_chr === '1' || first_chr === '9') {\n      base_guesses = 4;\n    } else {\n      if (first_chr.match(/\\d/)) {\n        base_guesses = 10;\n      } else {\n        base_guesses = 26;\n      }\n    }\n    if (!match.ascending) {\n      base_guesses *= 2;\n    }\n    return base_guesses * match.token.length;\n  },\n  MIN_YEAR_SPACE: 20,\n  REFERENCE_YEAR: new Date().getFullYear(),\n  regex_guesses: function(match) {\n    var char_class_bases, year_space;\n    char_class_bases = {\n      alpha_lower: 26,\n      alpha_upper: 26,\n      alpha: 52,\n      alphanumeric: 62,\n      digits: 10,\n      symbols: 33\n    };\n    if (match.regex_name in char_class_bases) {\n      return Math.pow(char_class_bases[match.regex_name], match.token.length);\n    } else {\n      switch (match.regex_name) {\n        case 'recent_year':\n          year_space = Math.abs(parseInt(match.regex_match[0]) - this.REFERENCE_YEAR);\n          year_space = Math.max(year_space, this.MIN_YEAR_SPACE);\n          return year_space;\n      }\n    }\n  },\n  date_guesses: function(match) {\n    var guesses, year_space;\n    year_space = Math.max(Math.abs(match.year - this.REFERENCE_YEAR), this.MIN_YEAR_SPACE);\n    guesses = year_space * 365;\n    if (match.separator) {\n      guesses *= 4;\n    }\n    return guesses;\n  },\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty),\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad),\n  KEYBOARD_STARTING_POSITIONS: ((function() {\n    var ref, results;\n    ref = adjacency_graphs.qwerty;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  })()).length,\n  KEYPAD_STARTING_POSITIONS: ((function() {\n    var ref, results;\n    ref = adjacency_graphs.keypad;\n    results = [];\n    for (k in ref) {\n      v = ref[k];\n      results.push(k);\n    }\n    return results;\n  })()).length,\n  spatial_guesses: function(match) {\n    var L, S, U, d, guesses, i, j, o, possible_turns, q, ref, ref1, ref2, ref3, s, shifted_variations, t, u;\n    if ((ref = match.graph) === 'qwerty' || ref === 'dvorak') {\n      s = this.KEYBOARD_STARTING_POSITIONS;\n      d = this.KEYBOARD_AVERAGE_DEGREE;\n    } else {\n      s = this.KEYPAD_STARTING_POSITIONS;\n      d = this.KEYPAD_AVERAGE_DEGREE;\n    }\n    guesses = 0;\n    L = match.token.length;\n    t = match.turns;\n    for (i = o = 2, ref1 = L; 2 <= ref1 ? o <= ref1 : o >= ref1; i = 2 <= ref1 ? ++o : --o) {\n      possible_turns = Math.min(t, i - 1);\n      for (j = q = 1, ref2 = possible_turns; 1 <= ref2 ? q <= ref2 : q >= ref2; j = 1 <= ref2 ? ++q : --q) {\n        guesses += this.nCk(i - 1, j - 1) * s * Math.pow(d, j);\n      }\n    }\n    if (match.shifted_count) {\n      S = match.shifted_count;\n      U = match.token.length - match.shifted_count;\n      if (S === 0 || U === 0) {\n        guesses *= 2;\n      } else {\n        shifted_variations = 0;\n        for (i = u = 1, ref3 = Math.min(S, U); 1 <= ref3 ? u <= ref3 : u >= ref3; i = 1 <= ref3 ? ++u : --u) {\n          shifted_variations += this.nCk(S + U, i);\n        }\n        guesses *= shifted_variations;\n      }\n    }\n    return guesses;\n  },\n  dictionary_guesses: function(match) {\n    var reversed_variations;\n    match.base_guesses = match.rank;\n    match.uppercase_variations = this.uppercase_variations(match);\n    match.l33t_variations = this.l33t_variations(match);\n    reversed_variations = match.reversed && 2 || 1;\n    return match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations;\n  },\n  START_UPPER: /^[A-Z][^A-Z]+$/,\n  END_UPPER: /^[^A-Z]+[A-Z]$/,\n  ALL_UPPER: /^[^a-z]+$/,\n  ALL_LOWER: /^[^A-Z]+$/,\n  uppercase_variations: function(match) {\n    var L, U, chr, i, len, o, q, ref, ref1, regex, variations, word;\n    word = match.token;\n    if (word.match(this.ALL_LOWER) || word.toLowerCase() === word) {\n      return 1;\n    }\n    ref = [this.START_UPPER, this.END_UPPER, this.ALL_UPPER];\n    for (o = 0, len = ref.length; o < len; o++) {\n      regex = ref[o];\n      if (word.match(regex)) {\n        return 2;\n      }\n    }\n    U = ((function() {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[A-Z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    })()).length;\n    L = ((function() {\n      var len1, q, ref1, results;\n      ref1 = word.split('');\n      results = [];\n      for (q = 0, len1 = ref1.length; q < len1; q++) {\n        chr = ref1[q];\n        if (chr.match(/[a-z]/)) {\n          results.push(chr);\n        }\n      }\n      return results;\n    })()).length;\n    variations = 0;\n    for (i = q = 1, ref1 = Math.min(U, L); 1 <= ref1 ? q <= ref1 : q >= ref1; i = 1 <= ref1 ? ++q : --q) {\n      variations += this.nCk(U + L, i);\n    }\n    return variations;\n  },\n  l33t_variations: function(match) {\n    var S, U, chr, chrs, i, o, p, possibilities, ref, ref1, subbed, unsubbed, variations;\n    if (!match.l33t) {\n      return 1;\n    }\n    variations = 1;\n    ref = match.sub;\n    for (subbed in ref) {\n      unsubbed = ref[subbed];\n      chrs = match.token.toLowerCase().split('');\n      S = ((function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === subbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      })()).length;\n      U = ((function() {\n        var len, o, results;\n        results = [];\n        for (o = 0, len = chrs.length; o < len; o++) {\n          chr = chrs[o];\n          if (chr === unsubbed) {\n            results.push(chr);\n          }\n        }\n        return results;\n      })()).length;\n      if (S === 0 || U === 0) {\n        variations *= 2;\n      } else {\n        p = Math.min(U, S);\n        possibilities = 0;\n        for (i = o = 1, ref1 = p; 1 <= ref1 ? o <= ref1 : o >= ref1; i = 1 <= ref1 ? ++o : --o) {\n          possibilities += this.nCk(U + S, i);\n        }\n        variations *= possibilities;\n      }\n    }\n    return variations;\n  }\n};\n\nmodule.exports = scoring;\n\n\n"},"sourceMaps":{"js":{"version":3,"file":"scoring.js","sourceRoot":"..","sources":["src/scoring.coffee"],"names":[],"mappings":"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","sourcesContent":["adjacency_graphs = require('./adjacency_graphs')\n\n# on qwerty, 'g' has degree 6, being adjacent to 'ftyhbv'. '\\' has degree 1.\n# this calculates the average over all keys.\ncalc_average_degree = (graph) ->\n  average = 0\n  for key, neighbors of graph\n    average += (n for n in neighbors when n).length\n  average /= (k for k,v of graph).length\n  average\n\nBRUTEFORCE_CARDINALITY = 10\nMIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000\nMIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10\nMIN_SUBMATCH_GUESSES_MULTI_CHAR = 50\n\nscoring =\n  nCk: (n, k) ->\n    # http://blog.plover.com/math/choose.html\n    return 0 if k > n\n    return 1 if k == 0\n    r = 1\n    for d in [1..k]\n      r *= n\n      r /= d\n      n -= 1\n    r\n\n  log10: (n) -> Math.log(n) / Math.log(10) # IE doesn't support Math.log10 :(\n  log2:  (n) -> Math.log(n) / Math.log(2)\n\n  factorial: (n) ->\n    # unoptimized, called only on small n\n    return 1 if n < 2\n    f = 1\n    f *= i for i in [2..n]\n    f\n\n  # ------------------------------------------------------------------------------\n  # search --- most guessable match sequence -------------------------------------\n  # ------------------------------------------------------------------------------\n  #\n  # takes a sequence of overlapping matches, returns the non-overlapping sequence with\n  # minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n  # for a length-n password with m candidate matches. l_max is the maximum optimal\n  # sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n  # search terminates rapidly.\n  #\n  # the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n  # minimizes the following function:\n  #\n  #    g = l! * Product(m.guesses for m in sequence) + D^(l - 1)\n  #\n  # where l is the length of the sequence.\n  #\n  # the factorial term is the number of ways to order l patterns.\n  #\n  # the D^(l-1) term is another length penalty, roughly capturing the idea that an\n  # attacker will try lower-length sequences first before trying length-l sequences.\n  #\n  # for example, consider a sequence that is date-repeat-dictionary.\n  #  - an attacker would need to try other date-repeat-dictionary combinations,\n  #    hence the product term.\n  #  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n  #    ..., hence the factorial term.\n  #  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n  #    sequences before length-3. assuming at minimum D guesses per pattern type,\n  #    D^(l-1) approximates Sum(D^i for i in [1..l-1]\n  #\n  # ------------------------------------------------------------------------------\n\n  most_guessable_match_sequence: (password, matches, _exclude_additive=false) ->\n\n    n = password.length\n\n    # partition matches into sublists according to ending index j\n    matches_by_j = ([] for _ in [0...n])\n    for m in matches\n      matches_by_j[m.j].push m\n    # small detail: for deterministic output, sort each sublist by i.\n    for lst in matches_by_j\n      lst.sort (m1, m2) -> m1.i - m2.i\n\n    optimal =\n      # optimal.m[k][l] holds final match in the best length-l match sequence covering the\n      # password prefix up to k, inclusive.\n      # if there is no length-l sequence that scores better (fewer guesses) than\n      # a shorter match sequence spanning the same prefix, optimal.m[k][l] is undefined.\n      m:  ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n      # optimal.pi allows for fast (non-looping) updates to the minimization function.\n      pi: ({} for _ in [0...n])\n\n      # same structure as optimal.m -- holds the overall metric.\n      g:  ({} for _ in [0...n])\n\n    # helper: considers whether a length-l sequence ending at match m is better (fewer guesses)\n    # than previously encountered sequences, updating state if so.\n    update = (m, l) =>\n      k = m.j\n      pi = @estimate_guesses m, password\n      if l > 1\n        # we're considering a length-l sequence ending with match m:\n        # obtain the product term in the minimization function by multiplying m's guesses\n        # by the product of the length-(l-1) sequence ending just before m, at m.i - 1.\n        pi *= optimal.pi[m.i - 1][l - 1]\n      # calculate the minimization func\n      g = @factorial(l) * pi\n      unless _exclude_additive\n        g += Math.pow(MIN_GUESSES_BEFORE_GROWING_SEQUENCE, l - 1)\n      # update state if new best.\n      # first see if any competing sequences covering this prefix, with l or fewer matches,\n      # fare better than this sequence. if so, skip it and return.\n      for competing_l, competing_g of optimal.g[k]\n        continue if competing_l > l\n        return if competing_g <= g\n      # this sequence might be part of the final optimal sequence.\n      optimal.g[k][l] = g\n      optimal.m[k][l] = m\n      optimal.pi[k][l] = pi\n\n    # helper: evaluate bruteforce matches ending at k.\n    bruteforce_update = (k) =>\n      # see if a single bruteforce match spanning the k-prefix is optimal.\n      m = make_bruteforce_match(0, k)\n      update(m, 1)\n      for i in [1..k]\n        # generate k bruteforce matches, spanning from (i=1, j=k) up to (i=k, j=k).\n        # see if adding these new matches to any of the sequences in optimal[i-1]\n        # leads to new bests.\n        m = make_bruteforce_match(i, k)\n        for l, last_m of optimal.m[i-1]\n          l = parseInt(l)\n          # corner: an optimal sequence will never have two adjacent bruteforce matches.\n          # it is strictly better to have a single bruteforce match spanning the same region:\n          # same contribution to the guess product with a lower length.\n          # --> safe to skip those cases.\n          continue if last_m.pattern == 'bruteforce'\n          # try adding m to this length-l sequence.\n          update(m, l + 1)\n\n    # helper: make bruteforce match objects spanning i to j, inclusive.\n    make_bruteforce_match = (i, j) =>\n      pattern: 'bruteforce'\n      token: password[i..j]\n      i: i\n      j: j\n\n    # helper: step backwards through optimal.m starting at the end,\n    # constructing the final optimal match sequence.\n    unwind = (n) =>\n      optimal_match_sequence = []\n      k = n - 1\n      # find the final best sequence length and score\n      l = undefined\n      g = Infinity\n      for candidate_l, candidate_g of optimal.g[k]\n        if candidate_g < g\n          l = candidate_l\n          g = candidate_g\n\n      while k >= 0\n        m = optimal.m[k][l]\n        optimal_match_sequence.unshift m\n        k = m.i - 1\n        l--\n      optimal_match_sequence\n\n    for k in [0...n]\n      for m in matches_by_j[k]\n        if m.i > 0\n          for l of optimal.m[m.i - 1]\n            l = parseInt(l)\n            update(m, l + 1)\n        else\n          update(m, 1)\n      bruteforce_update(k)\n    optimal_match_sequence = unwind(n)\n    optimal_l = optimal_match_sequence.length\n\n    # corner: empty password\n    if password.length == 0\n      guesses = 1\n    else\n      guesses = optimal.g[n - 1][optimal_l]\n\n    # final result object\n    password: password\n    guesses: guesses\n    guesses_log10: @log10 guesses\n    sequence: optimal_match_sequence\n\n  # ------------------------------------------------------------------------------\n  # guess estimation -- one function per match pattern ---------------------------\n  # ------------------------------------------------------------------------------\n\n  estimate_guesses: (match, password) ->\n    return match.guesses if match.guesses? # a match's guess estimate doesn't change. cache it.\n    min_guesses = 1\n    if match.token.length < password.length\n      min_guesses = if match.token.length == 1\n        MIN_SUBMATCH_GUESSES_SINGLE_CHAR\n      else\n        MIN_SUBMATCH_GUESSES_MULTI_CHAR\n    estimation_functions =\n      bruteforce: @bruteforce_guesses\n      dictionary: @dictionary_guesses\n      spatial:    @spatial_guesses\n      repeat:     @repeat_guesses\n      sequence:   @sequence_guesses\n      regex:      @regex_guesses\n      date:       @date_guesses\n    guesses = estimation_functions[match.pattern].call this, match\n    match.guesses = Math.max guesses, min_guesses\n    match.guesses_log10 = @log10 match.guesses\n    match.guesses\n\n  bruteforce_guesses: (match) ->\n    guesses = Math.pow BRUTEFORCE_CARDINALITY, match.token.length\n    if guesses == Number.POSITIVE_INFINITY\n        guesses = Number.MAX_VALUE;\n    # small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    # submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    min_guesses = if match.token.length == 1\n      MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1\n    else\n      MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1\n    Math.max guesses, min_guesses\n\n  repeat_guesses: (match) ->\n    match.base_guesses * match.repeat_count\n\n  sequence_guesses: (match) ->\n    first_chr = match.token.charAt(0)\n    # lower guesses for obvious starting points\n    if first_chr in ['a', 'A', 'z', 'Z', '0', '1', '9']\n      base_guesses = 4\n    else\n      if first_chr.match /\\d/\n        base_guesses = 10 # digits\n      else\n        # could give a higher base for uppercase,\n        # assigning 26 to both upper and lower sequences is more conservative.\n        base_guesses = 26\n    if not match.ascending\n      # need to try a descending sequence in addition to every ascending sequence ->\n      # 2x guesses\n      base_guesses *= 2\n    base_guesses * match.token.length\n\n  MIN_YEAR_SPACE: 20\n  REFERENCE_YEAR: new Date().getFullYear()\n\n  regex_guesses: (match) ->\n    char_class_bases =\n      alpha_lower:  26\n      alpha_upper:  26\n      alpha:        52\n      alphanumeric: 62\n      digits:       10\n      symbols:      33\n    if match.regex_name of char_class_bases\n      Math.pow(char_class_bases[match.regex_name], match.token.length)\n    else switch match.regex_name\n      when 'recent_year'\n        # conservative estimate of year space: num years from REFERENCE_YEAR.\n        # if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n        year_space = Math.abs parseInt(match.regex_match[0]) - @REFERENCE_YEAR\n        year_space = Math.max year_space, @MIN_YEAR_SPACE\n        year_space\n\n  date_guesses: (match) ->\n    # base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    year_space = Math.max(Math.abs(match.year - @REFERENCE_YEAR), @MIN_YEAR_SPACE)\n    guesses = year_space * 365\n    # add factor of 4 for separator selection (one of ~4 choices)\n    guesses *= 4 if match.separator\n    guesses\n\n  KEYBOARD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.qwerty)\n  # slightly different for keypad/mac keypad, but close enough\n  KEYPAD_AVERAGE_DEGREE: calc_average_degree(adjacency_graphs.keypad)\n\n  KEYBOARD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.qwerty).length\n  KEYPAD_STARTING_POSITIONS: (k for k,v of adjacency_graphs.keypad).length\n\n  spatial_guesses: (match) ->\n    if match.graph in ['qwerty', 'dvorak']\n      s = @KEYBOARD_STARTING_POSITIONS\n      d = @KEYBOARD_AVERAGE_DEGREE\n    else\n      s = @KEYPAD_STARTING_POSITIONS\n      d = @KEYPAD_AVERAGE_DEGREE\n    guesses = 0\n    L = match.token.length\n    t = match.turns\n    # estimate the number of possible patterns w/ length L or less with t turns or less.\n    for i in [2..L]\n      possible_turns = Math.min(t, i - 1)\n      for j in [1..possible_turns]\n        guesses += @nCk(i - 1, j - 1) * s * Math.pow(d, j)\n    # add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    # math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if match.shifted_count\n      S = match.shifted_count\n      U = match.token.length - match.shifted_count # unshifted count\n      if S == 0 or U == 0\n        guesses *= 2\n      else\n        shifted_variations = 0\n        shifted_variations += @nCk(S + U, i) for i in [1..Math.min(S, U)]\n        guesses *= shifted_variations\n    guesses\n\n  dictionary_guesses: (match) ->\n    match.base_guesses = match.rank # keep these as properties for display purposes\n    match.uppercase_variations = @uppercase_variations match\n    match.l33t_variations = @l33t_variations match\n    reversed_variations = match.reversed and 2 or 1\n    match.base_guesses * match.uppercase_variations * match.l33t_variations * reversed_variations\n\n  START_UPPER: /^[A-Z][^A-Z]+$/\n  END_UPPER: /^[^A-Z]+[A-Z]$/\n  ALL_UPPER: /^[^a-z]+$/\n  ALL_LOWER: /^[^A-Z]+$/\n\n  uppercase_variations: (match) ->\n    word = match.token\n    return 1 if word.match(@ALL_LOWER) or word.toLowerCase() == word\n    # a capitalized word is the most common capitalization scheme,\n    # so it only doubles the search space (uncapitalized + capitalized).\n    # allcaps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    for regex in [@START_UPPER, @END_UPPER, @ALL_UPPER]\n      return 2 if word.match regex\n    # otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    # with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    # the number of ways to lowercase U+L letters with L lowercase letters or less.\n    U = (chr for chr in word.split('') when chr.match /[A-Z]/).length\n    L = (chr for chr in word.split('') when chr.match /[a-z]/).length\n    variations = 0\n    variations += @nCk(U + L, i) for i in [1..Math.min(U, L)]\n    variations\n\n  l33t_variations: (match) ->\n    return 1 if not match.l33t\n    variations = 1\n    for subbed, unsubbed of match.sub\n      # lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n      chrs = match.token.toLowerCase().split('')\n      S = (chr for chr in chrs when chr == subbed).length   # num of subbed chars\n      U = (chr for chr in chrs when chr == unsubbed).length # num of unsubbed chars\n      if S == 0 or U == 0\n        # for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n        # treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n        # unsubbed.)\n        variations *= 2\n      else\n        # this case is similar to capitalization:\n        # with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n        p = Math.min(U, S)\n        possibilities = 0\n        possibilities += @nCk(U + S, i) for i in [1..p]\n        variations *= possibilities\n    variations\n\n  # utilities --------------------------------------------------------------------\n\nmodule.exports = scoring\n"]}},"error":null,"hash":"07f2d48713f87a050445668dd58e7fd3","cacheData":{"env":{}}}