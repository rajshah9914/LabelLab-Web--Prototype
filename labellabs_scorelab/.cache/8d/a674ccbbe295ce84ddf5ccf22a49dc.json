{"id":"../node_modules/zxcvbn/lib/matching.js","dependencies":[{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/matching.js.map","includedInParent":true,"mtime":1486439859000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/src/matching.coffee","includedInParent":true,"mtime":1474760652000},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/package.json","includedInParent":true,"mtime":1553433954598},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/.babelrc","includedInParent":true,"mtime":1552312477226},{"name":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/package.json","includedInParent":true,"mtime":1553433953594},{"name":"./frequency_lists","loc":{"line":4,"column":26},"parent":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/matching.js","resolved":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/frequency_lists.js"},{"name":"./adjacency_graphs","loc":{"line":6,"column":27},"parent":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/matching.js","resolved":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/adjacency_graphs.js"},{"name":"./scoring","loc":{"line":8,"column":18},"parent":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/matching.js","resolved":"/home/rajshah9914/Desktop/GSOC2019/labellabs_scorelab/node_modules/zxcvbn/lib/scoring.js"}],"generated":{"js":"// Generated by CoffeeScript 1.10.0\nvar DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, GRAPHS, L33T_TABLE, RANKED_DICTIONARIES, REGEXEN, adjacency_graphs, build_ranked_dict, frequency_lists, lst, matching, name, scoring;\n\nfrequency_lists = require('./frequency_lists');\n\nadjacency_graphs = require('./adjacency_graphs');\n\nscoring = require('./scoring');\n\nbuild_ranked_dict = function(ordered_list) {\n  var i, len1, o, result, word;\n  result = {};\n  i = 1;\n  for (o = 0, len1 = ordered_list.length; o < len1; o++) {\n    word = ordered_list[o];\n    result[word] = i;\n    i += 1;\n  }\n  return result;\n};\n\nRANKED_DICTIONARIES = {};\n\nfor (name in frequency_lists) {\n  lst = frequency_lists[name];\n  RANKED_DICTIONARIES[name] = build_ranked_dict(lst);\n}\n\nGRAPHS = {\n  qwerty: adjacency_graphs.qwerty,\n  dvorak: adjacency_graphs.dvorak,\n  keypad: adjacency_graphs.keypad,\n  mac_keypad: adjacency_graphs.mac_keypad\n};\n\nL33T_TABLE = {\n  a: ['4', '@'],\n  b: ['8'],\n  c: ['(', '{', '[', '<'],\n  e: ['3'],\n  g: ['6', '9'],\n  i: ['1', '!', '|'],\n  l: ['1', '|', '7'],\n  o: ['0'],\n  s: ['$', '5'],\n  t: ['+', '7'],\n  x: ['%'],\n  z: ['2']\n};\n\nREGEXEN = {\n  recent_year: /19\\d\\d|200\\d|201\\d/g\n};\n\nDATE_MAX_YEAR = 2050;\n\nDATE_MIN_YEAR = 1000;\n\nDATE_SPLITS = {\n  4: [[1, 2], [2, 3]],\n  5: [[1, 3], [2, 3]],\n  6: [[1, 2], [2, 4], [4, 5]],\n  7: [[1, 3], [2, 3], [4, 5], [4, 6]],\n  8: [[2, 4], [4, 6]]\n};\n\nmatching = {\n  empty: function(obj) {\n    var k;\n    return ((function() {\n      var results;\n      results = [];\n      for (k in obj) {\n        results.push(k);\n      }\n      return results;\n    })()).length === 0;\n  },\n  extend: function(lst, lst2) {\n    return lst.push.apply(lst, lst2);\n  },\n  translate: function(string, chr_map) {\n    var chr;\n    return ((function() {\n      var len1, o, ref, results;\n      ref = string.split('');\n      results = [];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        chr = ref[o];\n        results.push(chr_map[chr] || chr);\n      }\n      return results;\n    })()).join('');\n  },\n  mod: function(n, m) {\n    return ((n % m) + m) % m;\n  },\n  sorted: function(matches) {\n    return matches.sort(function(m1, m2) {\n      return (m1.i - m2.i) || (m1.j - m2.j);\n    });\n  },\n  omnimatch: function(password) {\n    var len1, matcher, matchers, matches, o;\n    matches = [];\n    matchers = [this.dictionary_match, this.reverse_dictionary_match, this.l33t_match, this.spatial_match, this.repeat_match, this.sequence_match, this.regex_match, this.date_match];\n    for (o = 0, len1 = matchers.length; o < len1; o++) {\n      matcher = matchers[o];\n      this.extend(matches, matcher.call(this, password));\n    }\n    return this.sorted(matches);\n  },\n  dictionary_match: function(password, _ranked_dictionaries) {\n    var dictionary_name, i, j, len, matches, o, p, password_lower, rank, ranked_dict, ref, ref1, ref2, word;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    matches = [];\n    len = password.length;\n    password_lower = password.toLowerCase();\n    for (dictionary_name in _ranked_dictionaries) {\n      ranked_dict = _ranked_dictionaries[dictionary_name];\n      for (i = o = 0, ref = len; 0 <= ref ? o < ref : o > ref; i = 0 <= ref ? ++o : --o) {\n        for (j = p = ref1 = i, ref2 = len; ref1 <= ref2 ? p < ref2 : p > ref2; j = ref1 <= ref2 ? ++p : --p) {\n          if (password_lower.slice(i, +j + 1 || 9e9) in ranked_dict) {\n            word = password_lower.slice(i, +j + 1 || 9e9);\n            rank = ranked_dict[word];\n            matches.push({\n              pattern: 'dictionary',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              matched_word: word,\n              rank: rank,\n              dictionary_name: dictionary_name,\n              reversed: false,\n              l33t: false\n            });\n          }\n        }\n      }\n    }\n    return this.sorted(matches);\n  },\n  reverse_dictionary_match: function(password, _ranked_dictionaries) {\n    var len1, match, matches, o, ref, reversed_password;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    reversed_password = password.split('').reverse().join('');\n    matches = this.dictionary_match(reversed_password, _ranked_dictionaries);\n    for (o = 0, len1 = matches.length; o < len1; o++) {\n      match = matches[o];\n      match.token = match.token.split('').reverse().join('');\n      match.reversed = true;\n      ref = [password.length - 1 - match.j, password.length - 1 - match.i], match.i = ref[0], match.j = ref[1];\n    }\n    return this.sorted(matches);\n  },\n  set_user_input_dictionary: function(ordered_list) {\n    return RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict(ordered_list.slice());\n  },\n  relevant_l33t_subtable: function(password, table) {\n    var chr, len1, letter, o, password_chars, ref, relevant_subs, sub, subs, subtable;\n    password_chars = {};\n    ref = password.split('');\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      chr = ref[o];\n      password_chars[chr] = true;\n    }\n    subtable = {};\n    for (letter in table) {\n      subs = table[letter];\n      relevant_subs = (function() {\n        var len2, p, results;\n        results = [];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          if (sub in password_chars) {\n            results.push(sub);\n          }\n        }\n        return results;\n      })();\n      if (relevant_subs.length > 0) {\n        subtable[letter] = relevant_subs;\n      }\n    }\n    return subtable;\n  },\n  enumerate_l33t_subs: function(table) {\n    var chr, dedup, helper, k, keys, l33t_chr, len1, len2, o, p, ref, sub, sub_dict, sub_dicts, subs;\n    keys = (function() {\n      var results;\n      results = [];\n      for (k in table) {\n        results.push(k);\n      }\n      return results;\n    })();\n    subs = [[]];\n    dedup = function(subs) {\n      var assoc, deduped, label, len1, members, o, sub, v;\n      deduped = [];\n      members = {};\n      for (o = 0, len1 = subs.length; o < len1; o++) {\n        sub = subs[o];\n        assoc = (function() {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = sub.length; p < len2; v = ++p) {\n            k = sub[v];\n            results.push([k, v]);\n          }\n          return results;\n        })();\n        assoc.sort();\n        label = ((function() {\n          var len2, p, results;\n          results = [];\n          for (v = p = 0, len2 = assoc.length; p < len2; v = ++p) {\n            k = assoc[v];\n            results.push(k + ',' + v);\n          }\n          return results;\n        })()).join('-');\n        if (!(label in members)) {\n          members[label] = true;\n          deduped.push(sub);\n        }\n      }\n      return deduped;\n    };\n    helper = function(keys) {\n      var dup_l33t_index, first_key, i, l33t_chr, len1, len2, next_subs, o, p, q, ref, ref1, rest_keys, sub, sub_alternative, sub_extension;\n      if (!keys.length) {\n        return;\n      }\n      first_key = keys[0];\n      rest_keys = keys.slice(1);\n      next_subs = [];\n      ref = table[first_key];\n      for (o = 0, len1 = ref.length; o < len1; o++) {\n        l33t_chr = ref[o];\n        for (p = 0, len2 = subs.length; p < len2; p++) {\n          sub = subs[p];\n          dup_l33t_index = -1;\n          for (i = q = 0, ref1 = sub.length; 0 <= ref1 ? q < ref1 : q > ref1; i = 0 <= ref1 ? ++q : --q) {\n            if (sub[i][0] === l33t_chr) {\n              dup_l33t_index = i;\n              break;\n            }\n          }\n          if (dup_l33t_index === -1) {\n            sub_extension = sub.concat([[l33t_chr, first_key]]);\n            next_subs.push(sub_extension);\n          } else {\n            sub_alternative = sub.slice(0);\n            sub_alternative.splice(dup_l33t_index, 1);\n            sub_alternative.push([l33t_chr, first_key]);\n            next_subs.push(sub);\n            next_subs.push(sub_alternative);\n          }\n        }\n      }\n      subs = dedup(next_subs);\n      return helper(rest_keys);\n    };\n    helper(keys);\n    sub_dicts = [];\n    for (o = 0, len1 = subs.length; o < len1; o++) {\n      sub = subs[o];\n      sub_dict = {};\n      for (p = 0, len2 = sub.length; p < len2; p++) {\n        ref = sub[p], l33t_chr = ref[0], chr = ref[1];\n        sub_dict[l33t_chr] = chr;\n      }\n      sub_dicts.push(sub_dict);\n    }\n    return sub_dicts;\n  },\n  l33t_match: function(password, _ranked_dictionaries, _l33t_table) {\n    var chr, k, len1, len2, match, match_sub, matches, o, p, ref, ref1, sub, subbed_chr, subbed_password, token, v;\n    if (_ranked_dictionaries == null) {\n      _ranked_dictionaries = RANKED_DICTIONARIES;\n    }\n    if (_l33t_table == null) {\n      _l33t_table = L33T_TABLE;\n    }\n    matches = [];\n    ref = this.enumerate_l33t_subs(this.relevant_l33t_subtable(password, _l33t_table));\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      sub = ref[o];\n      if (this.empty(sub)) {\n        break;\n      }\n      subbed_password = this.translate(password, sub);\n      ref1 = this.dictionary_match(subbed_password, _ranked_dictionaries);\n      for (p = 0, len2 = ref1.length; p < len2; p++) {\n        match = ref1[p];\n        token = password.slice(match.i, +match.j + 1 || 9e9);\n        if (token.toLowerCase() === match.matched_word) {\n          continue;\n        }\n        match_sub = {};\n        for (subbed_chr in sub) {\n          chr = sub[subbed_chr];\n          if (token.indexOf(subbed_chr) !== -1) {\n            match_sub[subbed_chr] = chr;\n          }\n        }\n        match.l33t = true;\n        match.token = token;\n        match.sub = match_sub;\n        match.sub_display = ((function() {\n          var results;\n          results = [];\n          for (k in match_sub) {\n            v = match_sub[k];\n            results.push(k + \" -> \" + v);\n          }\n          return results;\n        })()).join(', ');\n        matches.push(match);\n      }\n    }\n    return this.sorted(matches.filter(function(match) {\n      return match.token.length > 1;\n    }));\n  },\n  spatial_match: function(password, _graphs) {\n    var graph, graph_name, matches;\n    if (_graphs == null) {\n      _graphs = GRAPHS;\n    }\n    matches = [];\n    for (graph_name in _graphs) {\n      graph = _graphs[graph_name];\n      this.extend(matches, this.spatial_match_helper(password, graph, graph_name));\n    }\n    return this.sorted(matches);\n  },\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/,\n  spatial_match_helper: function(password, graph, graph_name) {\n    var adj, adjacents, cur_char, cur_direction, found, found_direction, i, j, last_direction, len1, matches, o, prev_char, shifted_count, turns;\n    matches = [];\n    i = 0;\n    while (i < password.length - 1) {\n      j = i + 1;\n      last_direction = null;\n      turns = 0;\n      if ((graph_name === 'qwerty' || graph_name === 'dvorak') && this.SHIFTED_RX.exec(password.charAt(i))) {\n        shifted_count = 1;\n      } else {\n        shifted_count = 0;\n      }\n      while (true) {\n        prev_char = password.charAt(j - 1);\n        found = false;\n        found_direction = -1;\n        cur_direction = -1;\n        adjacents = graph[prev_char] || [];\n        if (j < password.length) {\n          cur_char = password.charAt(j);\n          for (o = 0, len1 = adjacents.length; o < len1; o++) {\n            adj = adjacents[o];\n            cur_direction += 1;\n            if (adj && adj.indexOf(cur_char) !== -1) {\n              found = true;\n              found_direction = cur_direction;\n              if (adj.indexOf(cur_char) === 1) {\n                shifted_count += 1;\n              }\n              if (last_direction !== found_direction) {\n                turns += 1;\n                last_direction = found_direction;\n              }\n              break;\n            }\n          }\n        }\n        if (found) {\n          j += 1;\n        } else {\n          if (j - i > 2) {\n            matches.push({\n              pattern: 'spatial',\n              i: i,\n              j: j - 1,\n              token: password.slice(i, j),\n              graph: graph_name,\n              turns: turns,\n              shifted_count: shifted_count\n            });\n          }\n          i = j;\n          break;\n        }\n      }\n    }\n    return matches;\n  },\n  repeat_match: function(password) {\n    var base_analysis, base_guesses, base_matches, base_token, greedy, greedy_match, i, j, lastIndex, lazy, lazy_anchored, lazy_match, match, matches, ref;\n    matches = [];\n    greedy = /(.+)\\1+/g;\n    lazy = /(.+?)\\1+/g;\n    lazy_anchored = /^(.+?)\\1+$/;\n    lastIndex = 0;\n    while (lastIndex < password.length) {\n      greedy.lastIndex = lazy.lastIndex = lastIndex;\n      greedy_match = greedy.exec(password);\n      lazy_match = lazy.exec(password);\n      if (greedy_match == null) {\n        break;\n      }\n      if (greedy_match[0].length > lazy_match[0].length) {\n        match = greedy_match;\n        base_token = lazy_anchored.exec(match[0])[1];\n      } else {\n        match = lazy_match;\n        base_token = match[1];\n      }\n      ref = [match.index, match.index + match[0].length - 1], i = ref[0], j = ref[1];\n      base_analysis = scoring.most_guessable_match_sequence(base_token, this.omnimatch(base_token));\n      base_matches = base_analysis.sequence;\n      base_guesses = base_analysis.guesses;\n      matches.push({\n        pattern: 'repeat',\n        i: i,\n        j: j,\n        token: match[0],\n        base_token: base_token,\n        base_guesses: base_guesses,\n        base_matches: base_matches,\n        repeat_count: match[0].length / base_token.length\n      });\n      lastIndex = j + 1;\n    }\n    return matches;\n  },\n  MAX_DELTA: 5,\n  sequence_match: function(password) {\n    var delta, i, j, k, last_delta, o, ref, result, update;\n    if (password.length === 1) {\n      return [];\n    }\n    update = (function(_this) {\n      return function(i, j, delta) {\n        var ref, sequence_name, sequence_space, token;\n        if (j - i > 1 || Math.abs(delta) === 1) {\n          if ((0 < (ref = Math.abs(delta)) && ref <= _this.MAX_DELTA)) {\n            token = password.slice(i, +j + 1 || 9e9);\n            if (/^[a-z]+$/.test(token)) {\n              sequence_name = 'lower';\n              sequence_space = 26;\n            } else if (/^[A-Z]+$/.test(token)) {\n              sequence_name = 'upper';\n              sequence_space = 26;\n            } else if (/^\\d+$/.test(token)) {\n              sequence_name = 'digits';\n              sequence_space = 10;\n            } else {\n              sequence_name = 'unicode';\n              sequence_space = 26;\n            }\n            return result.push({\n              pattern: 'sequence',\n              i: i,\n              j: j,\n              token: password.slice(i, +j + 1 || 9e9),\n              sequence_name: sequence_name,\n              sequence_space: sequence_space,\n              ascending: delta > 0\n            });\n          }\n        }\n      };\n    })(this);\n    result = [];\n    i = 0;\n    last_delta = null;\n    for (k = o = 1, ref = password.length; 1 <= ref ? o < ref : o > ref; k = 1 <= ref ? ++o : --o) {\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n      if (last_delta == null) {\n        last_delta = delta;\n      }\n      if (delta === last_delta) {\n        continue;\n      }\n      j = k - 1;\n      update(i, j, last_delta);\n      i = j;\n      last_delta = delta;\n    }\n    update(i, password.length - 1, last_delta);\n    return result;\n  },\n  regex_match: function(password, _regexen) {\n    var matches, regex, rx_match, token;\n    if (_regexen == null) {\n      _regexen = REGEXEN;\n    }\n    matches = [];\n    for (name in _regexen) {\n      regex = _regexen[name];\n      regex.lastIndex = 0;\n      while (rx_match = regex.exec(password)) {\n        token = rx_match[0];\n        matches.push({\n          pattern: 'regex',\n          token: token,\n          i: rx_match.index,\n          j: rx_match.index + rx_match[0].length - 1,\n          regex_name: name,\n          regex_match: rx_match\n        });\n      }\n    }\n    return this.sorted(matches);\n  },\n  date_match: function(password) {\n    var best_candidate, candidate, candidates, distance, dmy, i, j, k, l, len1, len2, matches, maybe_date_no_separator, maybe_date_with_separator, metric, min_distance, o, p, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rx_match, s, t, token;\n    matches = [];\n    maybe_date_no_separator = /^\\d{4,8}$/;\n    maybe_date_with_separator = /^(\\d{1,4})([\\s\\/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n    for (i = o = 0, ref = password.length - 4; 0 <= ref ? o <= ref : o >= ref; i = 0 <= ref ? ++o : --o) {\n      for (j = p = ref1 = i + 3, ref2 = i + 7; ref1 <= ref2 ? p <= ref2 : p >= ref2; j = ref1 <= ref2 ? ++p : --p) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        if (!maybe_date_no_separator.exec(token)) {\n          continue;\n        }\n        candidates = [];\n        ref3 = DATE_SPLITS[token.length];\n        for (q = 0, len1 = ref3.length; q < len1; q++) {\n          ref4 = ref3[q], k = ref4[0], l = ref4[1];\n          dmy = this.map_ints_to_dmy([parseInt(token.slice(0, k)), parseInt(token.slice(k, l)), parseInt(token.slice(l))]);\n          if (dmy != null) {\n            candidates.push(dmy);\n          }\n        }\n        if (!(candidates.length > 0)) {\n          continue;\n        }\n        best_candidate = candidates[0];\n        metric = function(candidate) {\n          return Math.abs(candidate.year - scoring.REFERENCE_YEAR);\n        };\n        min_distance = metric(candidates[0]);\n        ref5 = candidates.slice(1);\n        for (r = 0, len2 = ref5.length; r < len2; r++) {\n          candidate = ref5[r];\n          distance = metric(candidate);\n          if (distance < min_distance) {\n            ref6 = [candidate, distance], best_candidate = ref6[0], min_distance = ref6[1];\n          }\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: '',\n          year: best_candidate.year,\n          month: best_candidate.month,\n          day: best_candidate.day\n        });\n      }\n    }\n    for (i = s = 0, ref7 = password.length - 6; 0 <= ref7 ? s <= ref7 : s >= ref7; i = 0 <= ref7 ? ++s : --s) {\n      for (j = t = ref8 = i + 5, ref9 = i + 9; ref8 <= ref9 ? t <= ref9 : t >= ref9; j = ref8 <= ref9 ? ++t : --t) {\n        if (j >= password.length) {\n          break;\n        }\n        token = password.slice(i, +j + 1 || 9e9);\n        rx_match = maybe_date_with_separator.exec(token);\n        if (rx_match == null) {\n          continue;\n        }\n        dmy = this.map_ints_to_dmy([parseInt(rx_match[1]), parseInt(rx_match[3]), parseInt(rx_match[4])]);\n        if (dmy == null) {\n          continue;\n        }\n        matches.push({\n          pattern: 'date',\n          token: token,\n          i: i,\n          j: j,\n          separator: rx_match[2],\n          year: dmy.year,\n          month: dmy.month,\n          day: dmy.day\n        });\n      }\n    }\n    return this.sorted(matches.filter(function(match) {\n      var is_submatch, len3, other_match, u;\n      is_submatch = false;\n      for (u = 0, len3 = matches.length; u < len3; u++) {\n        other_match = matches[u];\n        if (match === other_match) {\n          continue;\n        }\n        if (other_match.i <= match.i && other_match.j >= match.j) {\n          is_submatch = true;\n          break;\n        }\n      }\n      return !is_submatch;\n    }));\n  },\n  map_ints_to_dmy: function(ints) {\n    var dm, int, len1, len2, len3, o, over_12, over_31, p, possible_year_splits, q, ref, ref1, rest, under_1, y;\n    if (ints[1] > 31 || ints[1] <= 0) {\n      return;\n    }\n    over_12 = 0;\n    over_31 = 0;\n    under_1 = 0;\n    for (o = 0, len1 = ints.length; o < len1; o++) {\n      int = ints[o];\n      if ((99 < int && int < DATE_MIN_YEAR) || int > DATE_MAX_YEAR) {\n        return;\n      }\n      if (int > 31) {\n        over_31 += 1;\n      }\n      if (int > 12) {\n        over_12 += 1;\n      }\n      if (int <= 0) {\n        under_1 += 1;\n      }\n    }\n    if (over_31 >= 2 || over_12 === 3 || under_1 >= 2) {\n      return;\n    }\n    possible_year_splits = [[ints[2], ints.slice(0, 2)], [ints[0], ints.slice(1, 3)]];\n    for (p = 0, len2 = possible_year_splits.length; p < len2; p++) {\n      ref = possible_year_splits[p], y = ref[0], rest = ref[1];\n      if ((DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR)) {\n        dm = this.map_ints_to_dm(rest);\n        if (dm != null) {\n          return {\n            year: y,\n            month: dm.month,\n            day: dm.day\n          };\n        } else {\n          return;\n        }\n      }\n    }\n    for (q = 0, len3 = possible_year_splits.length; q < len3; q++) {\n      ref1 = possible_year_splits[q], y = ref1[0], rest = ref1[1];\n      dm = this.map_ints_to_dm(rest);\n      if (dm != null) {\n        y = this.two_to_four_digit_year(y);\n        return {\n          year: y,\n          month: dm.month,\n          day: dm.day\n        };\n      }\n    }\n  },\n  map_ints_to_dm: function(ints) {\n    var d, len1, m, o, ref, ref1;\n    ref = [ints, ints.slice().reverse()];\n    for (o = 0, len1 = ref.length; o < len1; o++) {\n      ref1 = ref[o], d = ref1[0], m = ref1[1];\n      if ((1 <= d && d <= 31) && (1 <= m && m <= 12)) {\n        return {\n          day: d,\n          month: m\n        };\n      }\n    }\n  },\n  two_to_four_digit_year: function(year) {\n    if (year > 99) {\n      return year;\n    } else if (year > 50) {\n      return year + 1900;\n    } else {\n      return year + 2000;\n    }\n  }\n};\n\nmodule.exports = matching;\n\n\n"},"sourceMaps":{"js":{"version":3,"file":"matching.js","sourceRoot":"..","sources":["src/matching.coffee"],"names":[],"mappings":"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","sourcesContent":["frequency_lists = require('./frequency_lists')\nadjacency_graphs = require('./adjacency_graphs')\nscoring = require('./scoring')\n\nbuild_ranked_dict = (ordered_list) ->\n  result = {}\n  i = 1 # rank starts at 1, not 0\n  for word in ordered_list\n    result[word] = i\n    i += 1\n  result\n\nRANKED_DICTIONARIES = {}\nfor name, lst of frequency_lists\n  RANKED_DICTIONARIES[name] = build_ranked_dict lst\n\nGRAPHS =\n  qwerty:     adjacency_graphs.qwerty\n  dvorak:     adjacency_graphs.dvorak\n  keypad:     adjacency_graphs.keypad\n  mac_keypad: adjacency_graphs.mac_keypad\n\nL33T_TABLE =\n  a: ['4', '@']\n  b: ['8']\n  c: ['(', '{', '[', '<']\n  e: ['3']\n  g: ['6', '9']\n  i: ['1', '!', '|']\n  l: ['1', '|', '7']\n  o: ['0']\n  s: ['$', '5']\n  t: ['+', '7']\n  x: ['%']\n  z: ['2']\n\nREGEXEN =\n  recent_year:  /19\\d\\d|200\\d|201\\d/g\n\nDATE_MAX_YEAR = 2050\nDATE_MIN_YEAR = 1000\nDATE_SPLITS =\n  4:[      # for length-4 strings, eg 1191 or 9111, two ways to split:\n    [1, 2] # 1 1 91 (2nd split starts at index 1, 3rd at index 2)\n    [2, 3] # 91 1 1\n    ]\n  5:[\n    [1, 3] # 1 11 91\n    [2, 3] # 11 1 91\n    ]\n  6:[\n    [1, 2] # 1 1 1991\n    [2, 4] # 11 11 91\n    [4, 5] # 1991 1 1\n    ]\n  7:[\n    [1, 3] # 1 11 1991\n    [2, 3] # 11 1 1991\n    [4, 5] # 1991 1 11\n    [4, 6] # 1991 11 1\n    ]\n  8:[\n    [2, 4] # 11 11 1991\n    [4, 6] # 1991 11 11\n    ]\n\nmatching =\n  empty: (obj) -> (k for k of obj).length == 0\n  extend: (lst, lst2) -> lst.push.apply lst, lst2\n  translate: (string, chr_map) -> (chr_map[chr] or chr for chr in string.split('')).join('')\n  mod: (n, m) -> ((n % m) + m) % m # mod impl that works for negative numbers\n  sorted: (matches) ->\n    # sort on i primary, j secondary\n    matches.sort (m1, m2) ->\n      (m1.i - m2.i) or (m1.j - m2.j)\n\n  # ------------------------------------------------------------------------------\n  # omnimatch -- combine everything ----------------------------------------------\n  # ------------------------------------------------------------------------------\n\n  omnimatch: (password) ->\n    matches = []\n    matchers = [\n      @dictionary_match\n      @reverse_dictionary_match\n      @l33t_match\n      @spatial_match\n      @repeat_match\n      @sequence_match\n      @regex_match\n      @date_match\n    ]\n    for matcher in matchers\n      @extend matches, matcher.call(this, password)\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # dictionary match (common passwords, english, last names, etc) ----------------\n  #-------------------------------------------------------------------------------\n\n  dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    # _ranked_dictionaries variable is for unit testing purposes\n    matches = []\n    len = password.length\n    password_lower = password.toLowerCase()\n    for dictionary_name, ranked_dict of _ranked_dictionaries\n      for i in [0...len]\n        for j in [i...len]\n          if password_lower[i..j] of ranked_dict\n            word = password_lower[i..j]\n            rank = ranked_dict[word]\n            matches.push\n              pattern: 'dictionary'\n              i: i\n              j: j\n              token: password[i..j]\n              matched_word: word\n              rank: rank\n              dictionary_name: dictionary_name\n              reversed: false\n              l33t: false\n    @sorted matches\n\n  reverse_dictionary_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES) ->\n    reversed_password = password.split('').reverse().join('')\n    matches = @dictionary_match reversed_password, _ranked_dictionaries\n    for match in matches\n      match.token = match.token.split('').reverse().join('') # reverse back\n      match.reversed = true\n      # map coordinates back to original string\n      [match.i, match.j] = [\n        password.length - 1 - match.j\n        password.length - 1 - match.i\n      ]\n    @sorted matches\n\n  set_user_input_dictionary: (ordered_list) ->\n    RANKED_DICTIONARIES['user_inputs'] = build_ranked_dict ordered_list.slice()\n\n  #-------------------------------------------------------------------------------\n  # dictionary match with common l33t substitutions ------------------------------\n  #-------------------------------------------------------------------------------\n\n  # makes a pruned copy of l33t_table that only includes password's possible substitutions\n  relevant_l33t_subtable: (password, table) ->\n    password_chars = {}\n    for chr in password.split('')\n      password_chars[chr] = true\n    subtable = {}\n    for letter, subs of table\n      relevant_subs = (sub for sub in subs when sub of password_chars)\n      if relevant_subs.length > 0\n        subtable[letter] = relevant_subs\n    subtable\n\n  # returns the list of possible 1337 replacement dictionaries for a given password\n  enumerate_l33t_subs: (table) ->\n    keys = (k for k of table)\n    subs = [[]]\n\n    dedup = (subs) ->\n      deduped = []\n      members = {}\n      for sub in subs\n        assoc = ([k,v] for k,v in sub)\n        assoc.sort()\n        label = (k+','+v for k,v in assoc).join('-')\n        unless label of members\n          members[label] = true\n          deduped.push sub\n      deduped\n\n    helper = (keys) ->\n      return if not keys.length\n      first_key = keys[0]\n      rest_keys = keys[1..]\n      next_subs = []\n      for l33t_chr in table[first_key]\n        for sub in subs\n          dup_l33t_index = -1\n          for i in [0...sub.length]\n            if sub[i][0] == l33t_chr\n              dup_l33t_index = i\n              break\n          if dup_l33t_index == -1\n            sub_extension = sub.concat [[l33t_chr, first_key]]\n            next_subs.push sub_extension\n          else\n            sub_alternative = sub.slice(0)\n            sub_alternative.splice(dup_l33t_index, 1)\n            sub_alternative.push [l33t_chr, first_key]\n            next_subs.push sub\n            next_subs.push sub_alternative\n      subs = dedup next_subs\n      helper(rest_keys)\n\n    helper(keys)\n    sub_dicts = [] # convert from assoc lists to dicts\n    for sub in subs\n      sub_dict = {}\n      for [l33t_chr, chr] in sub\n        sub_dict[l33t_chr] = chr\n      sub_dicts.push sub_dict\n    sub_dicts\n\n  l33t_match: (password, _ranked_dictionaries = RANKED_DICTIONARIES, _l33t_table = L33T_TABLE) ->\n    matches = []\n    for sub in @enumerate_l33t_subs @relevant_l33t_subtable(password, _l33t_table)\n      break if @empty sub # corner case: password has no relevant subs.\n      subbed_password = @translate password, sub\n      for match in @dictionary_match(subbed_password, _ranked_dictionaries)\n        token = password[match.i..match.j]\n        if token.toLowerCase() == match.matched_word\n          continue # only return the matches that contain an actual substitution\n        match_sub = {} # subset of mappings in sub that are in use for this match\n        for subbed_chr, chr of sub when token.indexOf(subbed_chr) != -1\n          match_sub[subbed_chr] = chr\n        match.l33t = true\n        match.token = token\n        match.sub = match_sub\n        match.sub_display = (\"#{k} -> #{v}\" for k,v of match_sub).join(', ')\n        matches.push match\n    @sorted matches.filter (match) ->\n      # filter single-character l33t matches to reduce noise.\n      # otherwise '1' matches 'i', '4' matches 'a', both very common English words\n      # with low dictionary rank.\n      match.token.length > 1\n\n  # ------------------------------------------------------------------------------\n  # spatial match (qwerty/dvorak/keypad) -----------------------------------------\n  # ------------------------------------------------------------------------------\n\n  spatial_match: (password, _graphs = GRAPHS) ->\n    matches = []\n    for graph_name, graph of _graphs\n      @extend matches, @spatial_match_helper(password, graph, graph_name)\n    @sorted matches\n\n  SHIFTED_RX: /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/\n  spatial_match_helper: (password, graph, graph_name) ->\n    matches = []\n    i = 0\n    while i < password.length - 1\n      j = i + 1\n      last_direction = null\n      turns = 0\n      if graph_name in ['qwerty', 'dvorak'] and @SHIFTED_RX.exec(password.charAt(i))\n        # initial character is shifted\n        shifted_count = 1\n      else\n        shifted_count = 0\n      loop\n        prev_char = password.charAt(j-1)\n        found = false\n        found_direction = -1\n        cur_direction = -1\n        adjacents = graph[prev_char] or []\n        # consider growing pattern by one character if j hasn't gone over the edge.\n        if j < password.length\n          cur_char = password.charAt(j)\n          for adj in adjacents\n            cur_direction += 1\n            if adj and adj.indexOf(cur_char) != -1\n              found = true\n              found_direction = cur_direction\n              if adj.indexOf(cur_char) == 1\n                # index 1 in the adjacency means the key is shifted,\n                # 0 means unshifted: A vs a, % vs 5, etc.\n                # for example, 'q' is adjacent to the entry '2@'.\n                # @ is shifted w/ index 1, 2 is unshifted.\n                shifted_count += 1\n              if last_direction != found_direction\n                # adding a turn is correct even in the initial case when last_direction is null:\n                # every spatial pattern starts with a turn.\n                turns += 1\n                last_direction = found_direction\n              break\n        # if the current pattern continued, extend j and try to grow again\n        if found\n          j += 1\n        # otherwise push the pattern discovered so far, if any...\n        else\n          if j - i > 2 # don't consider length 1 or 2 chains.\n            matches.push\n              pattern: 'spatial'\n              i: i\n              j: j-1\n              token: password[i...j]\n              graph: graph_name\n              turns: turns\n              shifted_count: shifted_count\n          # ...and then start a new search for the rest of the password.\n          i = j\n          break\n    matches\n\n  #-------------------------------------------------------------------------------\n  # repeats (aaa, abcabcabc) and sequences (abcdef) ------------------------------\n  #-------------------------------------------------------------------------------\n\n  repeat_match: (password) ->\n    matches = []\n    greedy = /(.+)\\1+/g\n    lazy = /(.+?)\\1+/g\n    lazy_anchored = /^(.+?)\\1+$/\n    lastIndex = 0\n    while lastIndex < password.length\n      greedy.lastIndex = lazy.lastIndex = lastIndex\n      greedy_match = greedy.exec password\n      lazy_match = lazy.exec password\n      break unless greedy_match?\n      if greedy_match[0].length > lazy_match[0].length\n        # greedy beats lazy for 'aabaab'\n        #   greedy: [aabaab, aab]\n        #   lazy:   [aa,     a]\n        match = greedy_match\n        # greedy's repeated string might itself be repeated, eg.\n        # aabaab in aabaabaabaab.\n        # run an anchored lazy match on greedy's repeated string\n        # to find the shortest repeated string\n        base_token = lazy_anchored.exec(match[0])[1]\n      else\n        # lazy beats greedy for 'aaaaa'\n        #   greedy: [aaaa,  aa]\n        #   lazy:   [aaaaa, a]\n        match = lazy_match\n        base_token = match[1]\n      [i, j] = [match.index, match.index + match[0].length - 1]\n      # recursively match and score the base string\n      base_analysis = scoring.most_guessable_match_sequence(\n        base_token\n        @omnimatch base_token\n      )\n      base_matches = base_analysis.sequence\n      base_guesses = base_analysis.guesses\n      matches.push\n        pattern: 'repeat'\n        i: i\n        j: j\n        token: match[0]\n        base_token: base_token\n        base_guesses: base_guesses\n        base_matches: base_matches\n        repeat_count: match[0].length / base_token.length\n      lastIndex = j + 1\n    matches\n\n  MAX_DELTA: 5\n  sequence_match: (password) ->\n    # Identifies sequences by looking for repeated differences in unicode codepoint.\n    # this allows skipping, such as 9753, and also matches some extended unicode sequences\n    # such as Greek and Cyrillic alphabets.\n    #\n    # for example, consider the input 'abcdb975zy'\n    #\n    # password: a   b   c   d   b    9   7   5   z   y\n    # index:    0   1   2   3   4    5   6   7   8   9\n    # delta:      1   1   1  -2  -41  -2  -2  69   1\n    #\n    # expected result:\n    # [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n\n    return [] if password.length == 1\n\n    update = (i, j, delta) =>\n      if j - i > 1 or Math.abs(delta) == 1\n        if 0 < Math.abs(delta) <= @MAX_DELTA\n          token = password[i..j]\n          if /^[a-z]+$/.test(token)\n            sequence_name = 'lower'\n            sequence_space = 26\n          else if /^[A-Z]+$/.test(token)\n            sequence_name = 'upper'\n            sequence_space = 26\n          else if /^\\d+$/.test(token)\n            sequence_name = 'digits'\n            sequence_space = 10\n          else\n            # conservatively stick with roman alphabet size.\n            # (this could be improved)\n            sequence_name = 'unicode'\n            sequence_space = 26\n          result.push\n            pattern: 'sequence'\n            i: i\n            j: j\n            token: password[i..j]\n            sequence_name: sequence_name\n            sequence_space: sequence_space\n            ascending: delta > 0\n\n    result = []\n    i = 0\n    last_delta = null\n\n    for k in [1...password.length]\n      delta = password.charCodeAt(k) - password.charCodeAt(k - 1)\n      unless last_delta?\n        last_delta = delta\n      continue if delta == last_delta\n      j = k - 1\n      update(i, j, last_delta)\n      i = j\n      last_delta = delta\n    update(i, password.length - 1, last_delta)\n    result\n\n  #-------------------------------------------------------------------------------\n  # regex matching ---------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  regex_match: (password, _regexen = REGEXEN) ->\n    matches = []\n    for name, regex of _regexen\n      regex.lastIndex = 0 # keeps regex_match stateless\n      while rx_match = regex.exec password\n        token = rx_match[0]\n        matches.push\n          pattern: 'regex'\n          token: token\n          i: rx_match.index\n          j: rx_match.index + rx_match[0].length - 1\n          regex_name: name\n          regex_match: rx_match\n    @sorted matches\n\n  #-------------------------------------------------------------------------------\n  # date matching ----------------------------------------------------------------\n  #-------------------------------------------------------------------------------\n\n  date_match: (password) ->\n    # a \"date\" is recognized as:\n    #   any 3-tuple that starts or ends with a 2- or 4-digit year,\n    #   with 2 or 0 separator chars (1.1.91 or 1191),\n    #   maybe zero-padded (01-01-91 vs 1-1-91),\n    #   a month between 1 and 12,\n    #   a day between 1 and 31.\n    #\n    # note: this isn't true date parsing in that \"feb 31st\" is allowed,\n    # this doesn't check for leap years, etc.\n    #\n    # recipe:\n    # start with regex to find maybe-dates, then attempt to map the integers\n    # onto month-day-year to filter the maybe-dates into dates.\n    # finally, remove matches that are substrings of other matches to reduce noise.\n    #\n    # note: instead of using a lazy or greedy regex to find many dates over the full string,\n    # this uses a ^...$ regex against every substring of the password -- less performant but leads\n    # to every possible date match.\n    matches = []\n    maybe_date_no_separator = /^\\d{4,8}$/\n    maybe_date_with_separator = ///\n      ^\n      ( \\d{1,4} )    # day, month, year\n      ( [\\s/\\\\_.-] ) # separator\n      ( \\d{1,2} )    # day, month\n      \\2             # same separator\n      ( \\d{1,4} )    # day, month, year\n      $\n    ///\n\n    # dates without separators are between length 4 '1191' and 8 '11111991'\n    for i in [0..password.length - 4]\n      for j in [i + 3..i + 7]\n        break if j >= password.length\n        token = password[i..j]\n        continue unless maybe_date_no_separator.exec token\n        candidates = []\n        for [k,l] in DATE_SPLITS[token.length]\n          dmy = @map_ints_to_dmy [\n            parseInt token[0...k]\n            parseInt token[k...l]\n            parseInt token[l...]\n          ]\n          candidates.push dmy if dmy?\n        continue unless candidates.length > 0\n        # at this point: different possible dmy mappings for the same i,j substring.\n        # match the candidate date that likely takes the fewest guesses: a year closest to 2000.\n        # (scoring.REFERENCE_YEAR).\n        #\n        # ie, considering '111504', prefer 11-15-04 to 1-1-1504\n        # (interpreting '04' as 2004)\n        best_candidate = candidates[0]\n        metric = (candidate) -> Math.abs candidate.year - scoring.REFERENCE_YEAR\n        min_distance = metric candidates[0]\n        for candidate in candidates[1..]\n          distance = metric candidate\n          if distance < min_distance\n            [best_candidate, min_distance] = [candidate, distance]\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: ''\n          year: best_candidate.year\n          month: best_candidate.month\n          day: best_candidate.day\n\n    # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n    for i in [0..password.length - 6]\n      for j in [i + 5..i + 9]\n        break if j >= password.length\n        token = password[i..j]\n        rx_match = maybe_date_with_separator.exec token\n        continue unless rx_match?\n        dmy = @map_ints_to_dmy [\n          parseInt rx_match[1]\n          parseInt rx_match[3]\n          parseInt rx_match[4]\n        ]\n        continue unless dmy?\n        matches.push\n          pattern: 'date'\n          token: token\n          i: i\n          j: j\n          separator: rx_match[2]\n          year: dmy.year\n          month: dmy.month\n          day: dmy.day\n\n    # matches now contains all valid date strings in a way that is tricky to capture\n    # with regexes only. while thorough, it will contain some unintuitive noise:\n    #\n    # '2015_06_04', in addition to matching 2015_06_04, will also contain\n    # 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n    #\n    # to reduce noise, remove date matches that are strict substrings of others\n    @sorted matches.filter (match) ->\n      is_submatch = false\n      for other_match in matches\n        continue if match is other_match\n        if other_match.i <= match.i and other_match.j >= match.j\n          is_submatch = true\n          break\n      not is_submatch\n\n  map_ints_to_dmy: (ints) ->\n    # given a 3-tuple, discard if:\n    #   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n    #   middle int is zero\n    #   any int is over the max allowable year\n    #   any int is over two digits but under the min allowable year\n    #   2 ints are over 31, the max allowable day\n    #   2 ints are zero\n    #   all ints are over 12, the max allowable month\n    return if ints[1] > 31 or ints[1] <= 0\n    over_12 = 0\n    over_31 = 0\n    under_1 = 0\n    for int in ints\n      return if 99 < int < DATE_MIN_YEAR or int > DATE_MAX_YEAR\n      over_31 += 1 if int > 31\n      over_12 += 1 if int > 12\n      under_1 += 1 if int <= 0\n    return if over_31 >= 2 or over_12 == 3 or under_1 >= 2\n\n    # first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n    possible_year_splits = [\n      [ints[2], ints[0..1]] # year last\n      [ints[0], ints[1..2]] # year first\n    ]\n    for [y, rest] in possible_year_splits\n      if DATE_MIN_YEAR <= y <= DATE_MAX_YEAR\n        dm = @map_ints_to_dm rest\n        if dm?\n          return {\n            year: y\n            month: dm.month\n            day: dm.day\n          }\n        else\n          # for a candidate that includes a four-digit year,\n          # when the remaining ints don't match to a day and month,\n          # it is not a date.\n          return\n\n    # given no four-digit year, two digit years are the most flexible int to match, so\n    # try to parse a day-month out of ints[0..1] or ints[1..0]\n    for [y, rest] in possible_year_splits\n      dm = @map_ints_to_dm rest\n      if dm?\n        y = @two_to_four_digit_year y\n        return {\n          year: y\n          month: dm.month\n          day: dm.day\n        }\n\n  map_ints_to_dm: (ints) ->\n    for [d, m] in [ints, ints.slice().reverse()]\n      if 1 <= d <= 31 and 1 <= m <= 12\n        return {\n          day: d\n          month: m\n        }\n\n  two_to_four_digit_year: (year) ->\n    if year > 99\n      year\n    else if year > 50\n      # 87 -> 1987\n      year + 1900\n    else\n      # 15 -> 2015\n      year + 2000\n\nmodule.exports = matching\n"]}},"error":null,"hash":"c2613cb4155523e4f0b4a23edc4b373c","cacheData":{"env":{}}}